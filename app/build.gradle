apply plugin: 'com.android.application'
apply plugin: 'org.robolectric'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

android {
    compileSdkVersion 22
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "io.github.hidroh.materialistic"
        minSdkVersion 9
        targetSdkVersion 22
        versionCode 9
        versionName "1.2"
        resValue "bool", "debug", "true"
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            zipAlignEnabled true
            resValue "bool", "debug", "false"
        }
    }
}

robolectric {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'

    // configure max heap size of the test JVM
    maxHeapSize = '2048m'

    // configure the test JVM arguments
    jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'

    // Specify max number of processes (default is 1)
    maxParallelForks = 1

    // Specify max number of test classes to execute in a test process
    // before restarting the process (default is unlimited)
    forkEvery = 150

    // configure whether failing tests should fail the build
    ignoreFailures false

    // use afterTest to listen to the test execution results
    afterTest { descriptor, result ->
        println "${descriptor.className} > ${descriptor.name} ${result.resultType}"
    }
}

task jacocoTestReport(type: JacocoReport) {
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        html.destination "${buildDir}/reports/coverage"
    }

    classDirectories = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            exclude: [
                    '**/R.class',
                    '**/R$*.class'
            ])
    sourceDirectories = files(android.sourceSets.main.java.srcDirs)
    executionData = files("${buildDir}/jacoco/testDebug.exec")
    doLast {
        println "coveralls report has been generated to file://${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        println "jacoco report has been generated to file://${reports.html.destination}/index.html"
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.android.support:recyclerview-v7:22.0.0'
    compile 'com.android.support:cardview-v7:22.0.0'
    compile 'com.android.support:support-v4:22.0.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.google.android.gms:play-services-analytics:7.0.0'
    testCompile fileTree(dir: "${rootProject.projectDir}/libs", include: ['*.jar'])
    testCompile 'junit:junit:4.12',
            'org.mockito:mockito-core:1.9.5+',
            'org.assertj:assertj-core:1.6.0'
    testCompile('org.robolectric:robolectric:2.4') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
//    compile('com.squareup.assertj:assertj-android:1.0.0') {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    }
//    compile('com.squareup.assertj:assertj-android-support-v4:1.0.0') {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    }
}
